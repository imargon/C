#gcc
#1.https://segmentfault.com/a/1190000020325922
#2.https://segmentfault.com/a/1190000021942612?utm_source
一、预编译 

操作步骤：gcc -E hello.c -o hello.i,生成.i文件。

1.将所有的#define删除，并展开所有的宏定义； 
2.处理所有的预编译指令，例如：#if,#elif,#else,#endif; 
3.处理#include预编译指令，将被包含的文件插入到预编译指令的位置； 
4.添加行号信息文件名信息，便于调试； 
5.删除所有的注释：// /**/; 
6.保留所有的#pragma编译指令，因为在编写程序的时候,我们经常要用到#pragma指令来设定编译器的状态或者是指示编译器完成一些特定的动作。 
包括（1）去注释 （2）宏替换 （3）头文件展开 （4）条件编译

二、编译（高级语言-->汇编语言）
操作步骤：gcc -S hello.c -o hello.s   
主要作用：1.扫描（词法分析），2.语法分析，3.语义分析，4.源代码优化（中间语言生成），5.代码生成，目标代码优化。

三、汇编（汇编语言-->二进制文件）
操作步骤：gcc -c hello.c -o hello.o
主要作用：汇编器是将汇编代码转变成可以执行的指令，生成目标文件。

四、链接
操作步骤：gcc hello.o -o hello
主要作用：链接过程主要包括：地址和空间的分配，符号决议和重定位。
地址和空间：系统给函数、变量分配地址和空间。
符号决议：也可以说地址绑定，分动态链接和静态链接，
重定位：假设此时又两个文件：A，B。A需要B中的某个函数mov的地址，未链接前将地址置为0，当A与B链接后修改目标地址，完成重定位

五、运行
操作步骤：./hello
主要功能：运行程序

预编译 编译 汇编 连接四个步骤：
    1.预编译: gcc -E file.c -o file.i   将.c文件转化为.i文件
    2.编译:   gcc -S file.i             生成一个.s文件 ,变成汇编程序
    3.汇编:   gcc -c                    main.s生成一个.o文件,可重定位的二进制文件
    4.连接:   gcc -o file.out file.o    生成了一个可执行文件file.out。gcc file.o 默认生成了可执行文件a.out
    
    gcc -E name.c  //得到.i文件
    gcc -S name.c  //得到.s文件
    gcc -c name.c  //得到.o文件
    gcc -o name.c  //得到.out文件

    gcc -E main.c ==== 预处理 
    gcc -S main.c ==== 只编译不汇编
    gcc -c main.c ==== 编译不链接，生成.o目标文件
    gcc -g main.c -o main_d ==== 可进行gdb调试
    gcc -Dname='xinzhu' === 定义宏 define name 'xinzhu'

    gcc main.c -o main -I../path
    gcc main.c -o main -I../path -L../path

    gcc -I [大写字母i]寻找头文件目录 /usr/local/include 
    gcc -L [大写字母l]寻找库文件 /usr/local/lib
    gcc -l word [小写字母l], 寻找动态链接库文件libword.so
